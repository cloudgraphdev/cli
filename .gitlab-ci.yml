---
.install-packages: &install-packages
  - apk --quiet --no-progress --update --no-cache add git openssh curl
  - ln -s /usr/bin/sha256sum /usr/bin/shasum

.configure-registry: &configure-registry
  - |
    {
      echo "//registry.npmjs.com/:_authToken=${NPM_TOKEN}"
      echo "@cloudgraph:registry=https://registry.npmjs.com/"
    } | tee -a .npmrc
  - |
    {
      echo "\"@cloudgraph:registry\" \"https://registry.npmjs.com/\""
      echo "\"//registry.npmjs.com/:_authToken\" \"${NPM_TOKEN}\""
    } | tee -a .yarnrc
  - NODE_ENV=cicd yarn install --frozen-lockfile --cache-folder .npm --prefer-offline

.configure-ssh: &configure-ssh
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$GITHUB_SSH_KEY" | tr -d '\r' > ~/.ssh/github_autodeploy
  - chmod 600 ~/.ssh/github_autodeploy
  - |
    {
      echo "Host github.com"
      echo "HostName github.com"
      echo "User git"
      echo "PreferredAuthentications publickey"
      echo "Port 22"
      echo "TCPKeepAlive yes"
      echo "IdentitiesOnly yes"
      echo "AddKeysToAgent yes"
      echo "IdentityFile ~/.ssh/github_autodeploy"
      echo "StrictHostKeyChecking no"
    } | tee -a /root/.ssh/config
  - chmod 0600 /root/.ssh/config

default:
  image: node:16-alpine
  before_script:
    - *install-packages
    - *configure-registry
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - lib/

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

variables:
  NPM_TOKEN: ${NPM_TOKEN}

stages:
  - build
  - test
  - release
  - publish
  - notify

build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\)/'
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always
  script:
    - yarn prepack

lint:
  stage: test
  rules:
    - when: always
  script:
    - yarn lint

# test:
#   image: node:16-alpine
#   stage: test
#   rules:
#     - when: always
#   script:
#     - yarn test

semantic release:
  stage: release
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^chore\(release\)/'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "alpha"
    - if: $CI_COMMIT_BRANCH == "beta"
  variables:
    # Set git commit identity
    GIT_AUTHOR_NAME: 'AutoCloud Deploy Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@loudcloud.dev'
    GIT_COMMITTER_NAME: 'AutoCloud Deploy Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@loudcloud.dev'
    # Disable Husky for the git step of semantic release (handles all versions, env var name changed in v6)
    HUSKY_SKIP_HOOKS: 1
    HUSKY: 0
  script:
    - npx semantic-release -r $CI_PROJECT_URL

homebrew:
  image: node:16
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_TAG =~ /alpha/
      when: never
    - if: $CI_COMMIT_TAG =~ /beta/
      when: never
    - if: $CI_COMMIT_TAG
      when: always
  variables:
    # Set git commit identity
    GIT_AUTHOR_NAME: 'AutoCloud Deploy Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@loudcloud.dev'
    GIT_COMMITTER_NAME: 'AutoCloud Deploy Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@loudcloud.dev'
  before_script:
    # - *install-packages
    - *configure-registry
    - *configure-ssh
    - mkdir -p /home/node/.aws
    - |
      cat << EOF > /home/node/.aws/config
      [default]
      region=us-east-1
      output=json

      [profile cloudgraph-iac]
      role_arn = ${AWS_ROLE_ARN}
      source_profile = default
      EOF
    - |
      cat << EOF > /home/node/.aws/credentials
      [default]
      aws_access_key_id = ${AWS_ACCESS_KEY_ID}
      aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
      EOF
    - export AWS_SHARED_CREDENTIALS_FILE=/home/node/.aws/credentials
    - export AWS_CONFIG_FILE=/home/node/.aws/config
    - export AWS_SDK_LOAD_CONFIG=true
    - export AWS_PROFILE=cloudgraph-iac
  script:
    - yarn build
    - yarn homebrew

homebrew:
  image: node:16-alpine
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH
      when: never
    - if: '$CI_COMMIT_TAG =~ /*alpha*/'
      when: never
    - if: '$CI_COMMIT_TAG =~ /*beta*/'
      when: never
    - if: $CI_COMMIT_TAG
      when: always
  variables:
    # Set git commit identity
    GIT_AUTHOR_NAME: 'AutoCloud Deploy Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@loudcloud.dev'
    GIT_COMMITTER_NAME: 'AutoCloud Deploy Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@loudcloud.dev'
  before_script:
    - *configure-registry
    - mkdir -p /root/.aws
    - |
      cat << EOF > /root/.aws/config
      [default]
      region=us-east-1
      output=json

      [profile autocloud-iac]
      role_arn = ${AWS_ROLE_ARN}
      source_profile = default
      EOF
    - |
      cat << EOF > /root/.aws/credentials
      [default]
      aws_access_key_id = ${AWS_ACCESS_KEY_ID}
      aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
      EOF
  script:
    - yarn homebrew

.curlcmd: &curlcmd >
  curl
  -sS
  -X POST
  --data-urlencode "payload={\"attachments\":[{\"fallback\":\"$GITLAB_USER_NAME released new $CI_PROJECT_TITLE version $CI_COMMIT_TAG\",\"color\":\"good\",\"author_name\":\"$GITLAB_USER_NAME ($GITLAB_USER_LOGIN)\",\"author_icon\":\"$GITLAB_USER_AVATAR\",\"author_link\":\"https://gitlab.com/$GITLAB_USER_LOGIN\",\"title\":\"Version $CI_COMMIT_TAG of $CI_PROJECT_NAME released\",\"title_link\":\"$CI_PROJECT_URL/-/tags/$CI_COMMIT_TAG\",\"fields\":[{\"title\":\"Tag\",\"value\":\"<$CI_PROJECT_URL/commits/$CI_COMMIT_TAG|$CI_COMMIT_TAG>\",\"short\":true},{\"title\":\"Commit\",\"value\":\"<$CI_PROJECT_URL/tree/$CI_COMMIT_SHA|$CI_COMMIT_TITLE>\",\"short\":true}],\"footer\":\"$CI_PROJECT_NAME\",\"ts\":$( date +%s )}]}"
  $SLACK_API_ENDPOINT

notify:
  stage: notify
  rules:
    - if: $CI_COMMIT_TAG
  # Overwrite the default before script with a no-op action to disable the node specific actions
  before_script:
    - echo "noop"
  script:
    - apk add --no-cache curl
    - GITLAB_USER_AVATAR=$( echo $GITLAB_USER_EMAIL | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | md5sum | awk -F' ' '{print $1}' | xargs -I{} echo 'https://www.gravatar.com/avatar/{}?s=80&d=identicon' )
    - *curlcmd
