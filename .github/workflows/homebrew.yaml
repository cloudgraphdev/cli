name: homebrew

on:
  push:
    branches:
      - master

jobs:
  homebrew:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      AWS_SDK_LOAD_CONFIG: true
      AWS_PROFILE: cloudgraph-iac
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_ROLE_ARN: ${{secrets.AWS_ROLE_ARN}}
      NODE_ENV: "cicd"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{secrets.GH_TOKEN}}
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: "https://registry.npmjs.org"

      - name: Mkdir .aws
        run: mkdir -p ~/.aws

      - name: Set .aws/config
        run: |
          cat << EOF > ~/.aws/config
          [default]
          region=us-east-1
          output=json
          
          [profile cloudgraph-iac]
          role_arn = ${{ secrets.AWS_ROLE_ARN }}
          source_profile = default
          EOF
      - name: Set .aws/credentials
        run: |
          cat << EOF > ~/.aws/credentials
          [default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key =  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Get cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Restoring cache
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Packages
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --cache-folder .npm --prefer-offline

      - name: Build
        run: yarn build

      - name: Add SSH key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.AUTODEPLOY_SSH_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/github_actions

      - name: Homebrew
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          git config --global user.email "no-reply@autocloud.dev"
          git config --global user.name "autocloud-deploy-bot"
          yarn homebrew
