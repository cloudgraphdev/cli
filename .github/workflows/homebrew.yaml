name: homebrew

on:
  push:
    branches:
      - master

jobs:
  homebrew:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{secrets.gh_token}}
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'

      - name: Mkdir .aws
        run: sudo mkdir -p /home/node/.aws

      - name: Set .aws/config
        run: |
          cat << EOF > /home/node/.aws/config
          [default]
          region=us-east-1
          output=json
          
          [profile cloudgraph-iac]
          role_arn = $AWS_ROLE_ARN
          source_profile = default
          EOF
      - name: Set .aws/credentials
        run: |
          cat << EOF > /home/node/.aws/credentials
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          EOF
      - name: Get cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
  
      - name: Restoring cache
        id: npm-cache
        uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Packages
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --cache-folder .npm --prefer-offline

      - name: Build
        run: yarn build

      - name: Homebrew        
        run: yarn homebrew
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
          AWS_SHARED_CREDENTIALS_FILE: /home/node/.aws/credentials
          AWS_CONFIG_FILE: /home/node/.aws/config
          AWS_SDK_LOAD_CONFIG: true
          AWS_PROFILE: cloudgraph-iac
          AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
          AWS_ROLE_ARN: ${{secrets.aws_role_arn}}
          NODE_ENV: 'cicd'         
      